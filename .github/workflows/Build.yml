name: Build

on:
  pull_request:
    branches: [ master ]

jobs:
  SystemApplication:
    runs-on: windows-2019
    env:
      BC_CONTAINER_NAME: bcdev
      BC_CONTAINER_USERNAME: admin
      BC_CONTAINER_PASSWORD: P@ssword1
      COMPILE_AND_PUBLISH: |
        {
          Compile-AppInBCContainer `
            -containerName $Env:BC_CONTAINER_NAME `
            -credential ([PSCredential]::new($Env:BC_CONTAINER_USERNAME, (ConvertTo-SecureString -String $Env:BC_CONTAINER_PASSWORD -AsPlainText -Force))) `
            -appProjectFolder $_ `
            -appOutputFolder $_ `
            -EnableCodeCop `
            -EnableUICop

          Publish-BcContainerApp `
            -containerName $Env:BC_CONTAINER_NAME `
            -credential ([PSCredential]::new($Env:BC_CONTAINER_USERNAME, (ConvertTo-SecureString -String $Env:BC_CONTAINER_PASSWORD -AsPlainText -Force))) `
            -appFile (gci $_ -Filter "*.app").FullName `
            -skipVerification `
            -install `
            -sync
        }
    steps:
      - uses: actions/checkout@v1

      - name: Install BcContainerHelper
        shell: powershell
        run: Install-Module BcContainerHelper -Force

      - name: Set up Business Central container
        shell: powershell
        run: |
          New-BCContainer `
            -accept_eula `
            -containerName $Env:BC_CONTAINER_NAME `
            -artifactUrl (Get-BcArtifactUrl -type sandbox -country us -select latest) `
            -alwaysPull `
            -auth NavUserPassword `
            -credential ([PSCredential]::new($Env:BC_CONTAINER_USERNAME, (ConvertTo-SecureString -String $Env:BC_CONTAINER_PASSWORD -AsPlainText -Force))) `
            -updateHosts `
            -enableTaskScheduler:$false `
            -additionalParameters @("--volume $Env:GITHUB_WORKSPACE\Modules`:c:\project") `
            -includeAL

          $installedApps = Get-BcContainerAppInfo -containerName $containerName -tenantSpecificProperties -sort DependenciesLast
          $installedApps | % {
            Unpublish-BcContainerApp -containerName $Env:BC_CONTAINER_NAME -name $_.Name -unInstall -doNotSaveData -doNotSaveSchema -force
          }

      - name: Build System Application
        shell: powershell
        run: Invoke-Expression "'$Env:GITHUB_WORKSPACE\Modules\System' | % $Env:COMPILE_AND_PUBLISH"

      - name: Build Test Framework
        shell: powershell
        run: |
          $LibrariesPath = "$Env:GITHUB_WORKSPACE\Modules\DevTools\TestFramework\TestLibraries"
          $TestRunner = "$Env:GITHUB_WORKSPACE\Modules\DevTools\TestFramework\TestRunner"
          Invoke-Expression "('$LibrariesPath\Any', '$LibrariesPath\Assert', '$LibrariesPath\Variable Storage', '$TestRunner') | % $Env:COMPILE_AND_PUBLISH"

      - name: Build System Application Test Libraries
        shell: powershell
        run: Invoke-Expression "'$Env:GITHUB_WORKSPACE\Modules\System Test Libraries' | % $Env:COMPILE_AND_PUBLISH"

      - name: Build System Application Tests
        shell: powershell
        run: Invoke-Expression "'$Env:GITHUB_WORKSPACE\Modules\System Tests' | % $Env:COMPILE_AND_PUBLISH"

      - name: Run System Application Tests
        shell: powershell
        run: |
          $SystemApplicationTestsAppID = "0d60b215-6ee1-4789-8e53-866cfa50c23c"
          $DisabledTests = "$Env:GITHUB_WORKSPACE\Modules\System Tests\DisabledTests.json"
          $ResultFileName = "$Env:GITHUB_WORKSPACE\Modules\System Tests\SystemApplicationTestResults.xml"
          Run-TestsInBCContainer `
            -containerName $Env:BC_CONTAINER_NAME `
            -credential ([PSCredential]::new($Env:BC_CONTAINER_USERNAME, (ConvertTo-SecureString -String $Env:BC_CONTAINER_PASSWORD -AsPlainText -Force))) `
            -extensionID $SystemApplicationTestsAppID `
            -disabledTests (Get-Content $DisabledTests | ConvertFrom-Json) `
            -JUnitResultFileName $ResultFileName `
            -detailed

          # The test result annotations will only contain the InnerText of nodes representing test failures.
          # Change the InnerText of failed test nodes in the the JUnit XML file to include both error message and call stack.
          [xml]$JUnitDoc = Get-Content $ResultFileName
          $TestCaseResults = $JUnitDoc.testsuites.ChildNodes | % { $_.testcase.ChildNodes }
          $TestFailures = $TestCaseResults | ? { $_.Name -eq "failure" }
          $TestFailures | % {
            $IndentedCallStack = ($_.InnerText).Replace("`n","`n  ")
            $_.InnerText = "Error:`n  $($_.message)`nCall Stack:`n  $IndentedCallStack"
          }
          $JUnitDoc.Save($ResultFileName)

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: "**/SystemApplicationTestResults.xml"
          report_individual_runs: true
